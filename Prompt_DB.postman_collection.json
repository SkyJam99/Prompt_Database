{
	"info": {
		"_postman_id": "19de6377-349d-49d6-8e04-3ec0e35c546d",
		"name": "Prompt_DB",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33728631"
	},
	"item": [
		{
			"name": "Get All Prompts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"",
							"pm.test(\"Verify that the 'name' field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'id' field is a non-negative integer\", function() {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    responseData.forEach(function(prompt) {",
							"        pm.expect(prompt.id).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/prompt",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"prompt"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Prompt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"",
							"pm.test(\"The 'name' field is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(prompt) {",
							"    pm.expect(prompt.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"  });",
							"});",
							"",
							"",
							"var responseData = pm.response.json();",
							"",
							"    var id = Array.isArray(responseData) && responseData.length > 0 ? responseData[0].id : null;",
							"",
							"    if (id) {",
							"        pm.collectionVariables.set(\"id\", id);",
							"        console.log(\"id set to:\", id);",
							"    } else {",
							"        console.error(\"id not found in response\");",
							"        pm.expect.fail(\"id not found in response\");",
							"    }"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n    {\r\n        \"name\": \"Test Prompt\",\r\n        \"prompt_content\": \"This is new a test prompt\",\r\n        \"prompt_variables\": \"Test\",\r\n        \"designed_for\": \"Test\"\r\n    }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/prompt",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"prompt"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Prompt by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response is an array\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Array is not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/prompt/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"prompt",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Prompt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response is an array with at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array').that.has.lengthOf.at.least(1);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n    {\r\n        \"name\": \"Updated Test Prompt\",\r\n        \"prompt_content\": \"UPDATED!\"\r\n    }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/prompt/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"prompt",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete prompt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the expected content type of 'application/json'\", function () {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});",
							"",
							"",
							"pm.test(\"Response is an array\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Array is not empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  pm.expect(responseData).to.have.length.above(0, \"Array should not be empty\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/prompt/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"prompt",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://skybear99.pythonanywhere.com",
			"type": "string"
		},
		{
			"key": "id",
			"value": "8",
			"type": "string"
		}
	]
}